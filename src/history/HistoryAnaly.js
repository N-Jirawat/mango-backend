import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { collection, query, where, getDocs, orderBy } from "firebase/firestore";
import { db } from "../firebaseConfig";
import "../css/historyanaly.css";

function History() {
  const [allPredictions, setAllPredictions] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [filteredPredictions, setFilteredPredictions] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);
  const navigate = useNavigate();

  // States ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 4;

  // States ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [searchDisease, setSearchDisease] = useState("");
  const [searchDate, setSearchDate] = useState("");

  useEffect(() => {
    const auth = getAuth();
    
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
        fetchHistory(currentUser);
      } else {
        setLoading(false);
        setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥");
      }
    });

    return () => unsubscribe();
  }, []);

  // Auto-filter ‡πÄ‡∏°‡∏∑‡πà‡∏≠ search criteria ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    let filtered = [...allPredictions];

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ
    if (searchDisease.trim()) {
      filtered = filtered.filter(prediction =>
        (prediction.diseaseName || "").toLowerCase().includes(searchDisease.toLowerCase())
      );
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    if (searchDate) {
      filtered = filtered.filter(prediction => {
        if (!prediction.timestamp?.seconds) return false;
        
        const predictionDate = new Date(prediction.timestamp.seconds * 1000);
        const predictionDateStr = predictionDate.toISOString().split('T')[0];
        
        return predictionDateStr === searchDate;
      });
    }

    setFilteredPredictions(filtered);
    setCurrentPage(1); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
  }, [allPredictions, searchDisease, searchDate]);

  const fetchHistory = async (currentUser) => {
    try {
      console.log("Fetching history for user:", currentUser.uid);
      
      const q = query(
        collection(db, "prediction_results"),
        where("userId", "==", currentUser.uid),
        orderBy("timestamp", "desc")
      );

      const querySnapshot = await getDocs(q);
      console.log("Query snapshot size:", querySnapshot.size);
      
      const historyData = [];
      querySnapshot.forEach((doc) => {
        console.log("Document data:", doc.data());
        historyData.push({ id: doc.id, ...doc.data() });
      });

      setAllPredictions(historyData);
      
      if (historyData.length === 0) {
        console.log("No predictions found for user:", currentUser.uid);
      }
      
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥:", error);
      setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: " + error.message);
      
      try {
        console.log("Trying without orderBy...");
        const simpleQuery = query(
          collection(db, "prediction_results"),
          where("userId", "==", currentUser.uid)
        );
        
        const simpleSnapshot = await getDocs(simpleQuery);
        const simpleData = [];
        simpleSnapshot.forEach((doc) => {
          simpleData.push({ id: doc.id, ...doc.data() });
        });
        
        simpleData.sort((a, b) => {
          const aTime = a.timestamp?.seconds || 0;
          const bTime = b.timestamp?.seconds || 0;
          return bTime - aTime;
        });
        
        setAllPredictions(simpleData);
        setError(null);
        console.log("Successfully loaded with simple query:", simpleData.length);
        
      } catch (simpleError) {
        console.error("Simple query also failed:", simpleError);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleGoHome = () => {
    navigate('/');
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  const getCurrentPageData = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredPredictions.slice(startIndex, endIndex);
  };

  const getTotalPages = () => {
    return Math.ceil(filteredPredictions.length / itemsPerPage);
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const clearSearch = () => {
    setSearchDisease("");
    setSearchDate("");
    // ‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á search ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  };

  if (loading) return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
  
  if (error) return <p style={{color: 'red'}}>{error}</p>;
  
  if (!user) return <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</p>;

  const currentPageData = getCurrentPageData();
  const totalPages = getTotalPages();

  return (
    <div className="history-container">
      <div className="analy-header">
        <button onClick={handleGoHome} className="back-button">
          ‚¨ÖÔ∏è ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </button>
      </div>

      <h2>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ</h2>
      
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
      <div className="search-container">
        <h3>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
        
        {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ */}
        <div className="search-field">
          <label>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ:</label>
          <input
            type="text"
            value={searchDisease}
            onChange={(e) => setSearchDisease(e.target.value)}
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
          />
        </div>

        {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
        <div className="search-field">
          <label>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
          <input
            type="date"
            value={searchDate}
            onChange={(e) => setSearchDate(e.target.value)}
          />
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        <div className="search-buttons">
          <button onClick={clearSearch} className="clear-search-btn">
            üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </button>
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
      <div className="search-results-info">
        <p>üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {filteredPredictions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {allPredictions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
      </div>

      {filteredPredictions.length === 0 ? (
        <div className="no-data-message">
          <p>
            {allPredictions.length === 0 
              ? "üìã ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå" 
              : "üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            }
          </p>
        </div>
      ) : (
        <>
          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
          <div className="history-list">
            {currentPageData.map((prediction) => (
              <div className="history-item" key={prediction.id}>
                <h3>{prediction.diseaseName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ"}</h3>
                {(prediction.imageUrl || prediction.imageBase64) && (
                  <div className="image-container">
                    <img
                      src={prediction.imageUrl || prediction.imageBase64}
                      alt="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
                      className="image-thumbnail"
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                  </div>
                )}
                <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (confidence):</strong> {Math.round((prediction.confidence || 0) * 100)}%</p>
                <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (accuracy):</strong> {Math.round((prediction.accuracy || 0) * 100)}%</p>
                <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</strong> {
                  prediction.timestamp?.seconds 
                    ? new Date(prediction.timestamp.seconds * 1000).toLocaleString("th-TH")
                    : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
                }</p>
                <button
                  className="view-details-btn"
                  onClick={() => navigate("/historydetail", {
                    state: {
                      docId: prediction.id,
                      ...prediction
                    }
                  })}
                >
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </button>
              </div>
            ))}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="pagination-container">
              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
              <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="pagination-nav"
              >
                ‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              </button>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ */}
              {Array.from({ length: totalPages }, (_, index) => {
                const pageNumber = index + 1;
                return (
                  <button
                    key={pageNumber}
                    onClick={() => handlePageChange(pageNumber)}
                    className={`pagination-btn ${currentPage === pageNumber ? 'active' : ''}`}
                  >
                    {pageNumber}
                  </button>
                );
              })}

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ */}
              <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="pagination-nav"
              >
                ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
              </button>
            </div>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
          <div className="pagination-stats">
            <p>
              üìÑ ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages} 
              ({((currentPage - 1) * itemsPerPage) + 1}-{Math.min(currentPage * itemsPerPage, filteredPredictions.length)} 
              ‡∏à‡∏≤‡∏Å {filteredPredictions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            </p>
          </div>
        </>
      )}
    </div>
  );
}

export default History;