# api/index.py (‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå api/ ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)

from flask import Flask, request, jsonify # send_from_directory ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß
from flask_cors import CORS
from PIL import Image
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.applications import EfficientNetV2S
from tensorflow.keras.applications.efficientnet_v2 import preprocess_input
import cloudinary
import cloudinary.uploader
import os
# import gdown # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô repo
import checkMango # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ checkMango.py ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå api/ ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask App ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ static_folder ‡∏´‡∏£‡∏∑‡∏≠ static_url_path
# ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Vercel ‡∏à‡∏∞ Serve Frontend ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
app = Flask(__name__)
CORS(app)

# -------------------------------
# CONFIG
# -------------------------------
IMG_SIZE = (224, 224)
USE_FILTER = True  # True = ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢, False = ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á

# ‡∏Ñ‡πà‡∏≤ confidence ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ö‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ
MANGO_LEAF_THRESHOLD = 0.70
DISEASE_CONFIDENCE_THRESHOLD = 0.80

model_classes = ['Anthracnose', 'Healthy', 'Sooty-mold', 'raised-spot']
class_map = {
    'Anthracnose': '‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™',
    'Healthy': '‡πÉ‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥',
    'Sooty-mold': '‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏î‡∏≥',
    'raised-spot': '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏π‡∏ô',
}

# -------------------------------
# Cloudinary config
# -------------------------------
# ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö API keys ‡πÉ‡∏ô Environment Variables ‡∏ö‡∏ô Vercel
# ‡πÄ‡∏ä‡πà‡∏ô VERCEL_CLOUD_NAME, VERCEL_API_KEY, VERCEL_API_SECRET
# ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
cloudinary.config(
    cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME', 'dsf25dlca'),
    api_key=os.environ.get('CLOUDINARY_API_KEY', '978124749794588'),
    api_secret=os.environ.get('CLOUDINARY_API_SECRET', 's_KmqxdLxYeW8H-dCbLkWFx_ZTQ'),
)
# ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Environment Variables ‡∏ö‡∏ô Vercel ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Project Settings -> Environment Variables

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å Local Path
# -------------------------------
# ‡πÉ‡∏ä‡πâ os.path.join ‡πÅ‡∏•‡∏∞ os.path.dirname(__file__) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠
# ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô
model_base_dir = os.path.join(os.path.dirname(__file__), "Model")
model_path = os.path.join(model_base_dir, "model_efficientnetv2s_224_R1.keras")

# gdown ‡πÅ‡∏•‡∏∞ model_file_id ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô repo
# model_file_id = "1cf-SSC8SdcgbJYhqn_-fu7hDhmgUcCST"
# model_url = f"https://drive.google.com/uc?id={model_file_id}"

# Vercel ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Git LFS (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
# ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô repo ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ os.path.exists ‡∏´‡∏£‡∏∑‡∏≠ gdown.download ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
# ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ô Build Time

def verify_model_file(model_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏£‡∏±‡∏ô‡∏ï‡∏≠‡∏ô Build Time)"""
    if not os.path.exists(model_path):
        return False, f"Model file does not exist: {model_path}"
    
    file_size = os.path.getsize(model_path)
    if file_size == 0:
        return False, "Model file is empty"
    
    if file_size < 1024:  # ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1KB ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå error
        return False, f"Model file too small ({file_size} bytes)"
    
    try:
        with open(model_path, 'rb') as f:
            header = f.read(8)
            if len(header) < 8:
                return False, "Invalid file header"
    except Exception as e:
        return False, f"Cannot read file: {e}"
    
    return True, "File appears valid"

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏±‡∏Å (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô Cold Start)
# -------------------------------
print(f"Checking model file: {model_path}")
is_valid, message = verify_model_file(model_path)
if not is_valid:
    print(f"‚ùå Model file issue: {message}")
    print(f"üìù Please ensure your model file is located at: {os.path.abspath(model_path)}")
    print("   Supported formats: .keras, .h5")
    raise RuntimeError(f"Model file not found or invalid: {message}")

try:
    print("Loading main model...")
    model = load_model(model_path)
    print(f"‚úÖ Main model loaded successfully from {model_path}")
    print(f"   Model input shape: {model.input_shape}")
    print(f"   Model output shape: {model.output_shape}")
except Exception as e:
    print(f"‚ùå Error loading main model: {e}")
    raise RuntimeError(f"Failed to load main model from {model_path}: {e}")

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î embedding model ‡πÅ‡∏•‡∏∞ reference embeddings (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô Cold Start)
# -------------------------------
if USE_FILTER:
    # ‡πÇ‡∏´‡∏•‡∏î embedding model
    try:
        checkMango.embedding_model = EfficientNetV2S(include_top=False, weights="imagenet", pooling="avg")
        print("‚úÖ EfficientNetV2S embedding model loaded successfully")
    except Exception as e:
        print(f"‚ùå Failed to load embedding model: {e}")
        raise RuntimeError(f"Failed to load embedding model: {e}")

    # ‡πÇ‡∏´‡∏•‡∏î reference embeddings ‡∏à‡∏≤‡∏Å Local Path
    embedding_path = os.path.join(model_base_dir, "mango_reference_embeddings.npy")
    # embedding_file_id ‡πÅ‡∏•‡∏∞ embedding_url ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß

    try:
        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ os.path.exists ‡∏´‡∏£‡∏∑‡∏≠ gdown.download ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        checkMango.mango_embeddings = np.load(embedding_path)
        print(f"‚úÖ Loaded {embedding_path} with shape {checkMango.mango_embeddings.shape}")
    except Exception as e:
        print(f"‚ùå Error loading {embedding_path}: {e}")
        # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ß‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô error ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ filter
        # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å raise error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        raise RuntimeError(f"Failed to load mango embeddings from {embedding_path}: {e}")
else:
    print("üîÑ Mango leaf filtering is disabled (USE_FILTER = False)")
    checkMango.mango_embeddings = np.array([])

# -------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û
# -------------------------------
def load_and_prep_image(image_file):
    try:
        image_file.seek(0)
        img = Image.open(image_file).convert("RGB").resize(IMG_SIZE)
        arr = np.array(img)
        arr = preprocess_input(arr)
        return np.expand_dims(arr, axis=0)
    except Exception as e:
        raise Exception(f"Error processing image: {e}")

def validate_image_file(image_file):
    if not image_file:
        raise ValueError("No image file provided")

    allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'}
    filename = image_file.filename.lower() if image_file.filename else ""
    if not any(filename.endswith(ext) for ext in allowed_extensions):
        raise ValueError("Invalid image format. Supported formats: PNG, JPG, JPEG, GIF, BMP, WEBP")

    image_file.seek(0, 2)
    file_size = image_file.tell()
    image_file.seek(0)

    if file_size > 10 * 1024 * 1024:
        raise ValueError("File size too large. Maximum size is 10MB")

# -------------------------------
# API Routes
# -------------------------------
@app.route('/predict', methods=['POST'])
def predict_image():
    try:
        if 'image' not in request.files:
            return jsonify({"error": "No image file provided"}), 400
        
        image = request.files['image']
        validate_image_file(image)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤ USE_FILTER = True)
        similarity = 0.0
        if USE_FILTER and hasattr(checkMango, 'mango_embeddings') and len(checkMango.mango_embeddings) > 0:
            try:
                image.seek(0)
                is_leaf, similarity = checkMango.is_mango_leaf_from_embedding(image, checkMango.mango_embeddings)
                if similarity < MANGO_LEAF_THRESHOLD:
                    return jsonify({
                        "prediction": "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á",
                        "confidence": float(similarity),
                        "raw_class": None,
                        "accuracy": 0,
                        "mango_leaf_confidence": float(similarity),
                        "mango_leaf_threshold": MANGO_LEAF_THRESHOLD,
                        "status": "rejected_not_mango_leaf"
                    })
            except Exception as e:
                print(f"Error in mango leaf detection: {e}")
                similarity = 0.0 # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞ return error ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ
        image.seek(0)
        img_array = load_and_prep_image(image)
        prediction = model.predict(img_array, verbose=0)
        class_id = int(np.argmax(prediction))
        class_eng = model_classes[class_id]
        class_th = class_map[class_eng]
        confidence = float(prediction[0][class_id])

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö confidence ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ
        if confidence < DISEASE_CONFIDENCE_THRESHOLD:
            return jsonify({
                "prediction": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                "confidence": confidence,
                "raw_class": class_eng,
                "accuracy": 0,
                "disease_threshold": DISEASE_CONFIDENCE_THRESHOLD,
                "status": "low_confidence"
            })

        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        response_data = {
            "prediction": class_th,
            "confidence": confidence,
            "raw_class": class_eng,
            "accuracy": 1,
            "disease_threshold": DISEASE_CONFIDENCE_THRESHOLD,
            "status": "success"
        }

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mango leaf confidence ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ filter
        if USE_FILTER and hasattr(checkMango, 'mango_embeddings') and len(checkMango.mango_embeddings) > 0:
            response_data["mango_leaf_confidence"] = float(similarity)
            response_data["mango_leaf_threshold"] = MANGO_LEAF_THRESHOLD

        return jsonify(response_data)

    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

@app.route("/upload", methods=["POST"])
def upload_image():
    try:
        if 'image' not in request.files:
            return jsonify({"error": "No image file provided"}), 400

        image = request.files['image']
        validate_image_file(image)

        upload_result = cloudinary.uploader.upload(image, folder="mango_diseases")
        return jsonify({
            "imageUrl": upload_result['secure_url'],
            "public_id": upload_result['public_id']
        })
    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": f"Upload failed: {str(e)}"}), 500

@app.route("/delete", methods=["POST"])
def delete_image():
    try:
        public_id = request.form.get('public_id') or request.json.get('public_id')
        if not public_id:
            return jsonify({"error": "No public_id provided"}), 400

        cloudinary.uploader.destroy(public_id)
        return jsonify({"result": "Image deleted successfully"}), 200
    except Exception as e:
        return jsonify({"error": f"Delete failed: {str(e)}"}), 500

@app.route('/config', methods=['GET'])
def get_config():
    return jsonify({
        "mango_leaf_threshold": MANGO_LEAF_THRESHOLD,
        "disease_confidence_threshold": DISEASE_CONFIDENCE_THRESHOLD,
        "use_filter": USE_FILTER,
        "img_size": IMG_SIZE,
        "model_classes": model_classes,
        "has_mango_embeddings": len(checkMango.mango_embeddings) > 0 if hasattr(checkMango, 'mango_embeddings') else False,
        "model_path": model_path,
        "embedding_path": os.path.join(model_base_dir, "mango_reference_embeddings.npy") if USE_FILTER else None # ‡∏õ‡∏£‡∏±‡∏ö path
    })

@app.route('/config', methods=['POST'])
def update_config():
    global MANGO_LEAF_THRESHOLD, DISEASE_CONFIDENCE_THRESHOLD, USE_FILTER
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "No config data provided"}), 400

        if 'mango_leaf_threshold' in data:
            MANGO_LEAF_THRESHOLD = float(data['mango_leaf_threshold'])
        if 'disease_confidence_threshold' in data:
            DISEASE_CONFIDENCE_THRESHOLD = float(data['disease_confidence_threshold'])
        if 'use_filter' in data:
            USE_FILTER = bool(data['use_filter'])

        return jsonify({"message": "Config updated successfully"}), 200
    except Exception as e:
        return jsonify({"error": f"Failed to update config: {str(e)}"}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    return jsonify({
        "status": "healthy",
        "model_loaded": 'model' in globals() and model is not None, # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ model
        "embedding_model_loaded": hasattr(checkMango, 'embedding_model') and checkMango.embedding_model is not None,
        "mango_embeddings_loaded": len(checkMango.mango_embeddings) > 0 if hasattr(checkMango, 'mango_embeddings') else False,
        "use_filter": USE_FILTER
    })

